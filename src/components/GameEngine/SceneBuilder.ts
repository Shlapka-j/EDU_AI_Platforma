import { 
  Scene, 
  Choice, 
  NarrativeActivity,
  EducationalContent,
  DifficultyLevel,
  GameAction,
  SceneCondition,
  NarrativeTemplate
} from '../../types';

export interface SceneBuilderOptions {
  subject: string;
  grade: number;
  difficulty: DifficultyLevel;
  educationalObjectives: string[];
  estimatedDuration: number;
  theme?: string;
  includeMultimedia?: boolean;
}

export class SceneBuilder {
  private sceneCounter: number = 0;
  private choiceCounter: number = 0;

  constructor() {
    this.sceneCounter = 0;
    this.choiceCounter = 0;
  }

  createNarrativeActivity(
    title: string,
    description: string,
    options: SceneBuilderOptions
  ): NarrativeActivity {
    const scenes = this.generateScenes(options);
    
    return {
      id: `narrative_${Date.now()}`,
      type: 'narrative_adventure' as any,
      title,
      description,
      content: {
        theme: options.theme || 'general',
        subject: options.subject,
        grade: options.grade
      },
      points: this.calculateTotalPoints(scenes),
      difficulty: options.difficulty,
      learningObjectives: options.educationalObjectives,
      startingSceneId: scenes[0].id,
      availableScenes: scenes,
      maxChoices: this.calculateMaxChoices(options.estimatedDuration),
      educationalObjectives: options.educationalObjectives
    };
  }

  generateScenes(options: SceneBuilderOptions): Scene[] {
    const scenes: Scene[] = [];
    
    // Generate opening scene
    scenes.push(this.createOpeningScene(options));
    
    // Generate middle scenes based on educational objectives
    for (let i = 0; i < options.educationalObjectives.length; i++) {
      scenes.push(this.createEducationalScene(options.educationalObjectives[i], options, i + 1));
    }
    
    // Generate challenge scenes
    scenes.push(this.createChallengeScene(options));
    
    // Generate ending scenes
    scenes.push(this.createEndingScene(options, true)); // Success ending
    scenes.push(this.createEndingScene(options, false)); // Alternative ending
    
    return scenes;
  }

  private createOpeningScene(options: SceneBuilderOptions): Scene {
    const sceneId = this.getNextSceneId();
    
    const baseTemplates = {
      physics: {
        location: '≈†koln√≠ fyzik√°ln√≠ laborato≈ô',
        text: 'Nach√°z√≠≈° se v modern√≠ fyzik√°ln√≠ laborato≈ôi pln√© zaj√≠mav√Ωch p≈ô√≠stroj≈Ø a experiment≈Ø. Tv√Ωm √∫kolem je prozkoumat fyzik√°ln√≠ jevy a aplikovat teoretick√© znalosti v praxi.',
        theme: 'üî¨'
      },
      chemistry: {
        location: 'Chemick√° laborato≈ô',
        text: 'Vstupuje≈° do dob≈ôe vybaven√© chemick√© laborato≈ôe. Kolem sebe vid√≠≈° r≈Øzn√© chemik√°lie, p≈ô√≠stroje a reakƒçn√≠ n√°doby. ƒåek√° tƒõ v√Ωzkum chemick√Ωch reakc√≠.',
        theme: '‚öóÔ∏è'
      },
      biology: {
        location: 'Biologick√° uƒçebna s mikroskopy',
        text: 'Ocit√°≈° se v biologick√© uƒçebnƒõ pln√© mikroskop≈Ø, prepar√°t≈Ø a model≈Ø. Tv√Ωm √∫kolem je prozkoumat svƒõt ≈æiv√Ωch organism≈Ø.',
        theme: 'üî¨'
      },
      mathematics: {
        location: 'Matematick√° uƒçebna s interaktivn√≠ tabul√≠',
        text: 'Vstupuje≈° do modern√≠ matematick√© uƒçebny s interaktivn√≠ tabul√≠ a r≈Øzn√Ωmi geometrick√Ωmi modely. ƒåekaj√≠ tƒõ zaj√≠mav√© matematick√© probl√©my.',
        theme: 'üìê'
      },
      general: {
        location: 'Interaktivn√≠ vzdƒõl√°vac√≠ centrum',
        text: 'Ocit√°≈° se v modern√≠m vzdƒõl√°vac√≠m centru pln√©m interaktivn√≠ch expozic a vzdƒõl√°vac√≠ch materi√°l≈Ø.',
        theme: 'üè´'
      }
    };

    const template = baseTemplates[options.subject as keyof typeof baseTemplates] || baseTemplates.general;
    
    return {
      id: sceneId,
      title: `${template.theme} Zaƒç√°tek dobrodru≈æstv√≠`,
      location: template.location,
      description: `√övodn√≠ sc√©n√°≈ô pro ${options.subject}`,
      text: template.text,
      choices: [
        {
          id: this.getNextChoiceId(),
          text: 'Prozkoumat dostupn√© vybaven√≠ a materi√°ly',
          description: 'Sezn√°mit se s prost≈ôed√≠m a dostupn√Ωmi n√°stroji',
          nextSceneId: this.getSceneId(1),
          points: 10,
          educationalFeedback: 'V√Ωborn√©! Pozn√°n√≠ prost≈ôed√≠ je z√°kladem ka≈æd√©ho √∫spƒõ≈°n√©ho v√Ωzkumu.',
          difficulty: DifficultyLevel.EASY
        },
        {
          id: this.getNextChoiceId(),
          text: 'Zeptat se na instrukce a postupy',
          description: 'Z√≠skat v√≠ce informac√≠ o tom, co se oƒçek√°v√°',
          nextSceneId: this.getSceneId(1),
          points: 8,
          educationalFeedback: 'Dob≈ôe! Ptan√≠ se na instrukce ukazuje odpovƒõdn√Ω p≈ô√≠stup k uƒçen√≠.',
          difficulty: DifficultyLevel.EASY
        },
        {
          id: this.getNextChoiceId(),
          text: 'Rovnou zaƒç√≠t s prvn√≠m experimentem',
          description: 'Naskok rovnou do akce bez p≈ô√≠pravy',
          nextSceneId: this.getSceneId(1),
          points: 5,
          consequence: 'Tv√° horlivost je obdivuhodn√°, ale p≈ô√≠prava je kl√≠ƒçov√° pro √∫spƒõch!',
          educationalFeedback: 'Nad≈°en√≠ je skvƒõl√©, ale systematick√Ω p≈ô√≠stup p≈ôin√°≈°√≠ lep≈°√≠ v√Ωsledky.',
          difficulty: DifficultyLevel.MEDIUM
        }
      ],
      educationalContent: {
        concept: 'Vƒõdeck√° metoda a p≈ô√≠prava',
        explanation: 'Ka≈æd√© vƒõdeck√© zkoum√°n√≠ zaƒç√≠n√° p≈ô√≠pravou a pozn√°n√≠m prost≈ôed√≠. Systematick√Ω p≈ô√≠stup vede k lep≈°√≠m v√Ωsledk≈Øm.',
        examples: [
          'Sezn√°men√≠ s bezpeƒçnostn√≠mi postupy',
          'Pozn√°n√≠ dostupn√Ωch n√°stroj≈Ø a materi√°l≈Ø',
          'Pl√°nov√°n√≠ postupu p≈ôed zaƒç√°tkem experimentu'
        ],
        difficulty: options.difficulty,
        subject: options.subject
      }
    };
  }

  private createEducationalScene(objective: string, options: SceneBuilderOptions, index: number): Scene {
    const sceneId = this.getSceneId(index);
    
    // Generate scene based on educational objective
    const scene: Scene = {
      id: sceneId,
      title: `üìö Vzdƒõl√°vac√≠ v√Ωzva ${index}`,
      location: this.generateLocationForObjective(objective, options.subject),
      description: `Sc√©n√°≈ô zamƒõ≈ôen√Ω na: ${objective}`,
      text: this.generateSceneText(objective, options),
      choices: this.generateEducationalChoices(objective, options, index),
      educationalContent: {
        concept: objective,
        explanation: this.generateExplanation(objective, options.subject),
        examples: this.generateExamples(objective, options.subject),
        difficulty: options.difficulty,
        subject: options.subject
      }
    };

    // Add conditions for advanced scenes
    if (index > 1) {
      scene.conditions = [
        {
          type: 'visited',
          key: this.getSceneId(index - 1),
          value: true,
          operator: '=='
        }
      ];
    }

    return scene;
  }

  private createChallengeScene(options: SceneBuilderOptions): Scene {
    const sceneId = this.getNextSceneId();
    
    return {
      id: sceneId,
      title: 'üéØ Fin√°ln√≠ v√Ωzva',
      location: 'Zku≈°ebn√≠ m√≠stnost',
      description: 'Z√°vƒõreƒçn√° v√Ωzva kombinuj√≠c√≠ v≈°echny nauƒçen√© koncepty',
      text: 'P≈ôi≈°el ƒças uk√°zat v≈°e, co jsi se nauƒçil! P≈ôed tebou je komplexn√≠ √∫kol, kter√Ω vy≈æaduje aplikaci v≈°ech poznatk≈Ø, kter√© jsi bƒõhem dobrodru≈æstv√≠ z√≠skal.',
      choices: [
        {
          id: this.getNextChoiceId(),
          text: 'Systematicky aplikovat v≈°echny nauƒçen√© principy',
          description: 'Pou≈æ√≠t strukturovan√Ω p≈ô√≠stup zalo≈æen√Ω na z√≠skan√Ωch znalostech',
          nextSceneId: this.getNextSceneId(),
          points: 50,
          actions: [
            {
              type: 'add_points',
              target: 'bonus',
              value: 25,
              message: 'üèÜ Bonus za systematick√Ω p≈ô√≠stup!'
            }
          ],
          educationalFeedback: 'Vynikaj√≠c√≠! Systematick√© aplikov√°n√≠ znalost√≠ je znak skuteƒçn√©ho odborn√≠ka.',
          difficulty: DifficultyLevel.HARD
        },
        {
          id: this.getNextChoiceId(),
          text: 'Pokusit se o kreativn√≠ ≈ôe≈°en√≠',
          description: 'Naj√≠t inovativn√≠ p≈ô√≠stup k probl√©mu',
          nextSceneId: this.getNextSceneId(),
          points: 40,
          actions: [
            {
              type: 'add_points',
              target: 'creativity',
              value: 20,
              message: 'üé® Bonus za kreativitu!'
            }
          ],
          educationalFeedback: 'Skvƒõl√©! Kreativita a inovace jsou d≈Øle≈æit√© pro vƒõdeck√Ω pokrok.',
          difficulty: DifficultyLevel.MEDIUM
        }
      ],
      conditions: [
        {
          type: 'score',
          key: 'totalPoints',
          value: 30,
          operator: '>='
        }
      ],
      educationalContent: {
        concept: 'Aplikace a synt√©za znalost√≠',
        explanation: 'Skuteƒçn√© porozumƒõn√≠ se projev√≠ schopnost√≠ aplikovat a kombinovat r≈Øzn√© koncepty v nov√Ωch situac√≠ch.',
        examples: [
          'Kombinace teoretick√Ωch znalost√≠ s praktick√Ωmi dovednostmi',
          'Kreativn√≠ ≈ôe≈°en√≠ komplexn√≠ch probl√©m≈Ø',
          'Systematick√° aplikace nauƒçen√Ωch princip≈Ø'
        ],
        difficulty: options.difficulty,
        subject: options.subject
      }
    };
  }

  private createEndingScene(options: SceneBuilderOptions, isSuccess: boolean): Scene {
    const sceneId = this.getNextSceneId();
    
    if (isSuccess) {
      return {
        id: sceneId,
        title: 'üéâ √öspƒõ≈°n√© dokonƒçen√≠',
        location: 'Slavnostn√≠ aula',
        description: '√öspƒõ≈°n√© zavr≈°en√≠ vzdƒõl√°vac√≠ho dobrodru≈æstv√≠',
        text: 'Gratulujeme! √öspƒõ≈°nƒõ jsi dokonƒçil v≈°echny v√Ωzvy a prok√°zal v√Ωborn√© porozumƒõn√≠ v≈°em koncept≈Øm. Tv√© systematick√© p≈ô√≠stupy a kreativn√≠ ≈ôe≈°en√≠ jsou p≈ô√≠kladem pro ostatn√≠.',
        choices: [],
        isEnding: true,
        rewards: [
          {
            type: 'badge',
            value: 'narrative_master',
            message: 'üèÖ Z√≠skal jsi odznak Mistr p≈ô√≠bƒõh≈Ø!'
          },
          {
            type: 'xp',
            value: 100,
            message: '‚≠ê Bonus 100 XP za dokonƒçen√≠!'
          }
        ],
        educationalContent: {
          concept: '√öspƒõ≈°n√© dokonƒçen√≠ vzdƒõl√°vac√≠ho procesu',
          explanation: 'Dokonƒçil jsi komplexn√≠ vzdƒõl√°vac√≠ cestu a prok√°zal schopnost aplikovat z√≠skan√© znalosti.',
          difficulty: options.difficulty,
          subject: options.subject
        }
      };
    } else {
      return {
        id: sceneId + '_alt',
        title: 'üåü Alternativn√≠ zakonƒçen√≠',
        location: 'Studijn√≠ m√≠stnost',
        description: 'Alternativn√≠ cesta k dokonƒçen√≠ dobrodru≈æstv√≠',
        text: 'I kdy≈æ jsi ne≈°el tradiƒçn√≠ cestou, nauƒçil ses mnoho cenn√Ωch vƒõc√≠! Ka≈æd√° cesta m√° svou hodnotu a tv√© jedineƒçn√© ≈ôe≈°en√≠ probl√©m≈Ø ukazuje, ≈æe existuje v√≠ce zp≈Øsob≈Ø, jak dos√°hnout c√≠le.',
        choices: [],
        isEnding: true,
        rewards: [
          {
            type: 'badge',
            value: 'creative_thinker',
            message: 'üé® Z√≠skal jsi odznak Kreativn√≠ myslitel!'
          },
          {
            type: 'xp',
            value: 75,
            message: '‚≠ê Bonus 75 XP za alternativn√≠ p≈ô√≠stup!'
          }
        ],
        educationalContent: {
          concept: 'Alternativn√≠ p≈ô√≠stupy k uƒçen√≠',
          explanation: 'Ka≈æd√Ω student m√° sv≈Øj jedineƒçn√Ω zp≈Øsob uƒçen√≠ a my≈°len√≠. Diverzita p≈ô√≠stup≈Ø obohacuje vzdƒõl√°vac√≠ proces.',
          difficulty: options.difficulty,
          subject: options.subject
        }
      };
    }
  }

  private generateLocationForObjective(objective: string, subject: string): string {
    const locations = {
      physics: ['Laborato≈ô mechaniky', 'Elektrotechnick√° d√≠lna', 'Optick√° laborato≈ô', 'Astronomick√° observato≈ô'],
      chemistry: ['Anorganick√° laborato≈ô', 'Organick√° laborato≈ô', 'Analytick√° laborato≈ô', 'Pr≈Ømyslov√° hala'],
      biology: ['Botanick√° zahrada', 'Zoologick√° laborato≈ô', 'Mikrobiologick√° laborato≈ô', 'Ter√©nn√≠ stanice'],
      mathematics: ['Geometrick√° d√≠lna', 'Poƒç√≠taƒçov√° uƒçebna', 'Statistick√© centrum', 'Aplikaƒçn√≠ laborato≈ô'],
      general: ['V√Ωzkumn√© centrum', 'Interaktivn√≠ laborato≈ô', 'Experiment√°ln√≠ prostory', 'Studijn√≠ centrum']
    };

    const subjectLocations = locations[subject as keyof typeof locations] || locations.general;
    return subjectLocations[Math.floor(Math.random() * subjectLocations.length)];
  }

  private generateSceneText(objective: string, options: SceneBuilderOptions): string {
    const templates = [
      `Stoj√≠≈° p≈ôed novou v√Ωzvou spojenou s konceptem "${objective}". Kolem sebe vid√≠≈° r≈Øzn√© n√°stroje a materi√°ly, kter√© ti mohou pomoci pochopit tento d≈Øle≈æit√Ω princip.`,
      `Ocit√°≈° se v situaci, kter√° vy≈æaduje praktickou aplikaci znalost√≠ o "${objective}". Jak se rozhodne≈° postupovat?`,
      `P≈ôed tebou je zaj√≠mav√Ω probl√©m t√Ωkaj√≠c√≠ se "${objective}". Tv√© rozhodnut√≠ ovlivn√≠, jak hluboko do t√©to problematiky pronikn≈°.`,
      `Nastala chv√≠le prozkoumat "${objective}" z praktick√©ho hlediska. Kter√© mo≈ænosti zvol√≠≈° pro sv√© zkoum√°n√≠?`
    ];

    return templates[Math.floor(Math.random() * templates.length)];
  }

  private generateEducationalChoices(objective: string, options: SceneBuilderOptions, index: number): Choice[] {
    const nextSceneId = index < options.educationalObjectives.length 
      ? this.getSceneId(index + 1) 
      : this.getNextSceneId(); // Challenge scene

    return [
      {
        id: this.getNextChoiceId(),
        text: `Prozkoumat teoretick√© z√°klady "${objective}"`,
        description: 'Zamƒõ≈ôit se na pochopen√≠ z√°kladn√≠ch princip≈Ø',
        nextSceneId,
        points: 15,
        educationalFeedback: `V√Ωbornƒõ! Pochopen√≠ teorie je z√°kladem pro praktickou aplikaci "${objective}".`,
        difficulty: DifficultyLevel.EASY
      },
      {
        id: this.getNextChoiceId(),
        text: `Prakticky experimentovat s "${objective}"`,
        description: 'Uƒçit se prost≈ôednictv√≠m hands-on zku≈°enost√≠',
        nextSceneId,
        points: 20,
        actions: [
          {
            type: 'add_item',
            target: `experiment_${index}`,
            value: true,
            message: `üß™ Provedl jsi experiment s "${objective}"`
          }
        ],
        educationalFeedback: `Skvƒõl√©! Praktick√© experimentov√°n√≠ prohlubuje porozumƒõn√≠ konceptu "${objective}".`,
        difficulty: DifficultyLevel.MEDIUM
      },
      {
        id: this.getNextChoiceId(),
        text: `Aplikovat "${objective}" na re√°ln√Ω probl√©m`,
        description: 'Naj√≠t praktick√© vyu≈æit√≠ v ka≈ædodenn√≠m ≈æivotƒõ',
        nextSceneId,
        points: 25,
        actions: [
          {
            type: 'set_flag',
            target: `applied_${index}`,
            value: true,
            message: `üí° Aplikoval jsi "${objective}" na re√°ln√Ω probl√©m`
          }
        ],
        educationalFeedback: `Vynikaj√≠c√≠! Aplikace na re√°ln√© probl√©my ukazuje skuteƒçn√© porozumƒõn√≠ "${objective}".`,
        difficulty: DifficultyLevel.HARD
      }
    ];
  }

  private generateExplanation(objective: string, subject: string): string {
    return `Koncept "${objective}" je z√°kladn√≠m stavebn√≠m kamenem v oblasti ${subject}. Pochopen√≠ tohoto principu ti umo≈æn√≠ l√©pe rozumƒõt slo≈æitƒõj≈°√≠m souvislostem a aplikovat znalosti v praktick√Ωch situac√≠ch.`;
  }

  private generateExamples(objective: string, subject: string): string[] {
    return [
      `Praktick√° aplikace "${objective}" v ka≈ædodenn√≠m ≈æivotƒõ`,
      `Experiment√°ln√≠ ovƒõ≈ôen√≠ princip≈Ø "${objective}"`,
      `Souvislosti "${objective}" s dal≈°√≠mi koncepty v ${subject}`
    ];
  }

  private calculateTotalPoints(scenes: Scene[]): number {
    return scenes.reduce((total, scene) => {
      const scenePoints = scene.choices.reduce((choiceTotal, choice) => {
        return choiceTotal + (choice.points || 0);
      }, 0);
      return total + scenePoints;
    }, 0);
  }

  private calculateMaxChoices(estimatedDuration: number): number {
    // Estimate based on 2-3 minutes per choice
    return Math.ceil(estimatedDuration / 2.5);
  }

  private getNextSceneId(): string {
    return `scene_${++this.sceneCounter}`;
  }

  private getSceneId(index: number): string {
    return `scene_${index}`;
  }

  private getNextChoiceId(): string {
    return `choice_${++this.choiceCounter}`;
  }

  // Template-based scene generation
  createFromTemplate(template: NarrativeTemplate): NarrativeActivity {
    return {
      id: `narrative_${Date.now()}`,
      type: 'narrative_adventure' as any,
      title: template.name,
      description: template.description,
      content: {
        templateId: template.id,
        subject: template.subject,
        grade: template.grade
      },
      points: this.calculateTotalPoints(template.scenes),
      difficulty: DifficultyLevel.MEDIUM,
      learningObjectives: template.educationalGoals,
      startingSceneId: template.scenes[0].id,
      availableScenes: template.scenes,
      maxChoices: this.calculateMaxChoices(template.estimatedDuration),
      educationalObjectives: template.educationalGoals
    };
  }

  // Quick scene creation helpers
  createQuickScene(
    title: string,
    text: string,
    choices: Array<{ text: string; nextSceneId: string; points?: number }>
  ): Scene {
    return {
      id: this.getNextSceneId(),
      title,
      location: 'Obecn√© prost≈ôed√≠',
      description: '',
      text,
      choices: choices.map(choice => ({
        id: this.getNextChoiceId(),
        text: choice.text,
        nextSceneId: choice.nextSceneId,
        points: choice.points || 10,
        difficulty: DifficultyLevel.MEDIUM
      }))
    };
  }
}